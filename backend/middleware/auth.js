// middleware/auth.js - Contenido completo

const jwt = require('jsonwebtoken');

module.exports = function authenticateToken(req, res, next) {
  console.log('üîç Middleware ejecut√°ndose...');
  console.log('üìã Headers recibidos:', req.headers);
  
  const authHeader = req.headers['authorization'];
  console.log('üîê Auth header:', authHeader);
  
  const token = authHeader && authHeader.split(' ')[1];
  console.log('üé´ Token extra√≠do:', token ? token.substring(0, 20) + '...' : 'No token');
  
  if (!token) {
    console.error('‚ùå Token no proporcionado');
    return res.status(401).json({
      success: false,
      message: 'Token no proporcionado'
    });
  }

  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
    if (err) {
      console.error('‚ùå Error al verificar token:', err.message);
      return res.status(403).json({
        success: false,
        message: 'Token inv√°lido'
      });
    }
    
    console.log('‚úÖ Token decodificado completo:', decoded);
    console.log('üë§ UserInfo:', decoded.userInfo);
    
    // Extraer CURP de la estructura correcta
    const paciente_curp = decoded.userInfo?.CURP;
    console.log('üÜî CURP extra√≠do:', paciente_curp);
    
    if (!paciente_curp) {
      console.error('‚ùå CURP no encontrado en userInfo:', decoded.userInfo);
      return res.status(403).json({
        success: false,
        message: 'CURP no encontrado en el token'
      });
    }
    
    // Asignar a req.user
    req.user = {
      curp: paciente_curp.trim(),
      ...decoded.userInfo,
      userId: decoded.userId,
      userType: decoded.userType
    };
    
    console.log('‚úÖ Usuario asignado a req.user:', {
      curp: req.user.curp,
      nombre: req.user.pac_nombre,
      tipo: req.user.userType
    });
    
    next();
  });
};